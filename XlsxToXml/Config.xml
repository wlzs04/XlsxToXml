<Config>
  <ImportXlsxRelativePath>/..\..\..\..\..\YiSiHoliday\Document\Artres\Config\Recorder\/</ImportXlsxRelativePath>
  <ExportXmlRelativePath>/..\..\..\..\..\YiSiHoliday\Assets\Artres\Config\Recorder/</ExportXmlRelativePath>
  <ExportCSRelativePath>/..\..\..\..\..\YiSiHoliday\Assets\Script\Config\Recorder/</ExportCSRelativePath>
  <ProjectVersionTool>git</ProjectVersionTool>
  <CSRecorderTemplateFileRelativePath>/CSRecorderTemplate.txt</CSRecorderTemplateFileRelativePath>
  <CSEnumTemplateFileRelativePath>/CSEnumTemplate.txt</CSEnumTemplateFileRelativePath>
  <XmlFileName>{fileName}.xml</XmlFileName>
  <CSFileName>{className}.cs</CSFileName>
  <CSClassPropertyTemplateMap>
    <Property addInAttribute="true" addInElement="true"><![CDATA[        /// <summary>
        /// {propertyConfigName} {propertyDescription}
        /// </summary>
        public {propertyClassName} {propertyValueName} { get; private set; }]]></Property>
    <LoadInAttributeFunction addInAttribute="true" addInElement="false"><![CDATA[                    case "{propertyValueName}":
                    {
                        {propertyValueName} = {convertFunction}
                        break;
                    }]]></LoadInAttributeFunction>
    <LoadNodeFunction addInAttribute="false" addInElement="true"><![CDATA[                    case "{propertyValueName}":
                    {
                        {propertyValueName} = {convertFunction}
                        break;
                    }]]></LoadNodeFunction>
    <EunmField addInAttribute="true" addInElement="true"><![CDATA[        /// <summary>
        /// {propertyConfigName}
        /// </summary>
        {propertyValueName},]]></EunmField>
    <StructField addInAttribute="true" addInElement="true"><![CDATA[        /// <summary>
        /// {propertyConfigName}
        /// </summary>
        public {propertyClassName} {propertyValueName};]]></StructField>
    <StructInitField addInAttribute="true" addInElement="true"><![CDATA[            {propertyValueName} = {propertyDefaultValue};]]></StructInitField>
    <StructLoadField addInAttribute="true" addInElement="true"><![CDATA[            if(length > {propertyIndex})
            {
                string attributeValue = stringArray[{propertyIndex}];
                {propertyValueName} = {convertFunction};
            }]]></StructLoadField>
    <StructFieldString addInAttribute="true" addInElement="true">
      <![CDATA[
            {toStringFunction}]]></StructFieldString>
  </CSClassPropertyTemplateMap>
  <ConvertFunctionTemplateMap>
    <int>Convert.ToInt32(attributeValue);</int>
    <string>attributeValue;</string>
    <float>(float)Convert.ToDouble(attributeValue);</float>
    <bool>Convert.ToBoolean(attributeValue);</bool>
    <SplitStringList><![CDATA[new {propertyClassName}();
                        string[] valueList =  attributeValue.Split(new char[] {'{propertyClassParam1}'},StringSplitOptions.RemoveEmptyEntries);
                        foreach (string valueString in valueList)
                        {
                            attributeValue = valueString;
                            {propertyClassName1} propertyValue = {convertFunction1}
                            {propertyValueName}.Add(propertyValue);
                        }]]></SplitStringList>
    <SplitStringMap><![CDATA[new {propertyClassName}();
                        string[] pairList =  attributeValue.Split(new char[] {'{propertyClassParam1}'},StringSplitOptions.RemoveEmptyEntries);
                        foreach (string pair in pairList)
                        {
                            string[] keyValueList =  pair.Split(new char[] {'{propertyClassParam2}'},StringSplitOptions.RemoveEmptyEntries);
                            attributeValue = keyValueList[0];
                            {propertyClassName1} propertyKey = {convertFunction1}
                            attributeValue = keyValueList[1];
                            {propertyClassName2} propertyValue = {convertFunction2}
                            {propertyValueName}.Add(propertyKey,propertyValue);
                        }]]></SplitStringMap>
    <ValueList><![CDATA[new {propertyClassName}();
                        foreach (XElement keyValueNode in element.Elements())
                        {
                            string attributeValue = keyValueNode.Attribute("value").Value;
                            {propertyClassName1} propertyValue = {convertFunction1}
                            {propertyValueName}.Add(propertyValue);
                        }]]></ValueList>
    <KeyValueMap><![CDATA[new {propertyClassName}();
                        foreach (XElement keyValueNode in element.Elements())
                        {
                            string attributeValue = keyValueNode.Attribute("key").Value;
                            {propertyClassName1} propertyKey = {convertFunction1}
                            attributeValue = keyValueNode.Attribute("value").Value;
                            {propertyClassName2} propertyValue = {convertFunction2}
                            {propertyValueName}.Add(propertyKey, propertyValue);
                        }]]></KeyValueMap>
    <StructList><![CDATA[new {propertyClassName}();
                        foreach (XElement keyValueNode in element.Elements())
                        {
                            {propertyClassName1} propertyValue = new {propertyClassName1}();
                            propertyValue.LoadFromXmlNode(keyValueNode);
                            {propertyValueName}.Add(propertyValue);
                        }]]></StructList>
    <StructMap><![CDATA[new {propertyClassName}();
                        foreach (XElement keyValueNode in element.Elements())
                        {
                            string attributeValue = keyValueNode.Attribute("{structMapKeyName}").Value;
                            {propertyClassName1} propertyKey = {convertFunction1}
                            {propertyClassName2} propertyValue = new {propertyClassName2}();
                            propertyValue.LoadFromXmlNode(keyValueNode);
                            {propertyValueName}.Add(propertyKey, propertyValue);
                        }]]></StructMap>
    <custom>({propertyClassName})HelpManager.ConvertStringToObjectByType(typeof({propertyClassName}),attributeValue);</custom>
  </ConvertFunctionTemplateMap>
  <ToStringFunctionTemplateMap>
    <int>stringBuilder.Append($"{{propertyValueName}}{split}");</int>
    <string>stringBuilder.Append($"{{propertyValueName}}{split}");</string>
    <float>stringBuilder.Append($"{{propertyValueName}}{split}");</float>
    <bool>stringBuilder.Append($"{{propertyValueName}}{split}");</bool>
    <SplitStringList>
      <![CDATA[foreach (var item in {propertyValueName})
            {
                stringBuilder.Append( item.+"{propertyClassParam1}");
            }
            if({propertyValueName}.Count>0)
            {
                stringBuilder.Remove(stringBuilder.Length - 1, 1);
            }
            stringBuilder.Append("{split}");]]>
    </SplitStringList>
    <SplitStringMap>
      <![CDATA[foreach (var item in {propertyValueName})
            {
                stringBuilder.Append( item.Key + "{propertyClassParam1}" + item.Value+"{propertyClassParam2}");
            }
            if({propertyValueName}.Count>0)
            {
                stringBuilder.Remove(stringBuilder.Length - 1, 1);
            }
            stringBuilder.Append("{split}");]]>
    </SplitStringMap>
    <custom>stringBuilder.Append($"{{propertyValueName}}{split}");</custom>
  </ToStringFunctionTemplateMap>
</Config>